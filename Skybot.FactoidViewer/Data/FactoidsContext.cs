// Skybot.FactoidViewer
// Skybot.FactoidViewer / FactoidsContext.cs BY Kristian Schlikow
// First modified on 2023.03.18
// Last modified on 2023.03.23

#region
#endregion

namespace Skybot.FactoidViewer.Data

{
#region
    using Microsoft.EntityFrameworkCore;

    using Models;
#endregion

    /// <summary>
    ///     Entity Framework database context for the Factoid database.
    ///     Implements the <see cref="DbContext" />
    /// </summary>
    /// <seealso cref="DbContext" />
    public class FactoidsContext : DbContext
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="FactoidsContext" /> class.
        /// </summary>
        /// <remarks>
        ///     See <see href="https://aka.ms/efcore-docs-dbcontext">DbContext lifetime, configuration, and initialization</see>
        ///     for more information and examples.
        /// </remarks>
        public FactoidsContext() {}

        /// <summary>
        ///     Initializes a new instance of the <see cref="FactoidsContext" /> class.
        /// </summary>
        /// <param name="options">The options.</param>
        public FactoidsContext(DbContextOptions<FactoidsContext> options) : base(options) {}

        /// <summary>
        /// </summary>
        /// <value>DbSet of type Factoid.</value>
        public virtual DbSet<Factoid> Factoids { get; set; } = null!;

        /// <summary>
        /// </summary>
        /// <value>DbSet of type Validator.</value>
        public virtual DbSet<Validator> Validators { get; set; } = null!;

        /// <summary>
        ///     Override this method to further configure the model that was discovered by convention from the entity types
        ///     exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting
        ///     model may be cached
        ///     and re-used for subsequent instances of your derived context.
        /// </summary>
        /// <param name="modelBuilder">
        ///     The builder being used to construct the model for this context. Databases (and other extensions) typically
        ///     define extension methods on this object that allow you to configure aspects of the model that are specific
        ///     to a given database.
        /// </param>
        /// <remarks>
        ///     <para>
        ///         If a model is explicitly set on the options for this context (via
        ///         <see
        ///             cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />
        ///         )
        ///         then this method will not be run. However, it will still run when creating a compiled model.
        ///     </para>
        ///     <para>
        ///         See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more
        ///         information and
        ///         examples.
        ///     </para>
        /// </remarks>
        /// <autogeneratedoc />
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Factoid>(entity =>
            {
                entity.HasKey(e => e.Key);

                entity.ToTable("factoids");

                entity.Property(e => e.Key).HasColumnName("key");
                entity.Property(e => e.CreatedAt).HasColumnType("TIMESTAMP").HasColumnName("created_at").IsRequired(false);
                entity.Property(e => e.CreatedBy).HasColumnName("created_by").IsRequired(false);
                entity.Property(e => e.Fact).HasColumnName("fact").IsRequired(false);
                entity.Property(e => e.LockedAt).HasColumnType("TIMESTAMP").HasColumnName("locked_at").IsRequired(false);
                entity.Property(e => e.LockedBy).HasColumnName("locked_by").IsRequired(false);
                entity.Property(e => e.ModifiedAt).HasColumnType("TIMESTAMP").HasColumnName("modified_at").IsRequired(false);
                entity.Property(e => e.ModifiedBy).HasColumnName("modified_by").IsRequired(false);
                entity.Property(e => e.RequestedCount).HasColumnName("requested_count").IsRequired(false);
            });

            modelBuilder.Entity<Validator>(entity =>
            {
                entity.HasKey(e => e.ValidKey);

                entity.ToTable("validator");

                entity.Property(e => e.ValidKey).HasColumnName("validKey");
                entity.Property(e => e.ValidValue).HasColumnType("BOOL").HasColumnName("validValue");
            });
        }
    }
}
